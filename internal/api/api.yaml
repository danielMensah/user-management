openapi: "3.0.3"
info:
  title: User Management API
  version: 0.0.1
  description: User Management API
servers:
  - url: http://localhost:8000/api/v1
    description: Local server
paths:
  /_healthz:
    get:
      summary: Health check
      description: Returns 200 if the service is up and running
      tags:
        - health
      responses:
        "200":
          description: Service is up and running
          content:
            text/plain:
              schema:
                type: string
                example: OK
  /users:
    get:
      summary: Get all users
      description: Get all users
      operationId: getUsers
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/country'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      summary: Create a new user
      description: Create a new user
      operationId: createUser
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateData'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /users/{id}:
    delete:
      summary: Delete a user
      description: Delete a user
      operationId: deleteUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted user
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      summary: Update a user
      description: Update a user
      operationId: updateUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateData'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'


components:
  schemas:
    GetUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    CreateUserResponse:
      type: object
      required:
        - _id
      properties:
        _id:
          $ref: '#/components/schemas/Id'
    User:
      type: object
      required:
        - _id
        - first_name
        - last_name
        - nickname
        - email
        - country
        - created_at
        - updated_at
      properties:
        _id:
          $ref: '#/components/schemas/Id'
        first_name:
          $ref: '#/components/schemas/FirstName'
        last_name:
          $ref: '#/components/schemas/LastName'
        nickname:
          $ref: '#/components/schemas/Nickname'
        email:
          $ref: '#/components/schemas/Email'
        country:
          $ref: '#/components/schemas/Country'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    UserUpdateData:
      type: object
      properties:
        first_name:
          $ref: '#/components/schemas/FirstName'
        last_name:
          $ref: '#/components/schemas/LastName'
        nickname:
          $ref: '#/components/schemas/Nickname'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
        country:
          $ref: '#/components/schemas/Country'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    UserCreateData:
      type: object
      required:
        - first_name
        - last_name
        - nickname
        - email
        - password
        - country
      properties:
        first_name:
          $ref: '#/components/schemas/FirstName'
        last_name:
          $ref: '#/components/schemas/LastName'
        nickname:
          $ref: '#/components/schemas/Nickname'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
        country:
          $ref: '#/components/schemas/Country'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    Id:
      type: string
      x-oapi-codegen-extra-tags:
        bson: _id,omitempty
    FirstName:
      type: string
      example: John
      x-oapi-codegen-extra-tags:
        bson: first_name,omitempty
    LastName:
      type: string
      example: Doe
      x-oapi-codegen-extra-tags:
        bson: last_name,omitempty
    Nickname:
      type: string
      example: jd
      x-oapi-codegen-extra-tags:
        bson: nickname,omitempty
    Email:
      type: string
      example: js@example.com
      x-oapi-codegen-extra-tags:
        bson: email,omitempty
    Password:
      type: string
      example: worm
      x-oapi-codegen-extra-tags:
        bson: password,omitempty
    Country:
      type: string
      example: UK
      x-oapi-codegen-extra-tags:
        bson: country,omitempty
    CreatedAt:
      type: string
      format: date-time
      x-oapi-codegen-extra-tags:
        bson: created_at,omitempty
    UpdatedAt:
      type: string
      format: date-time
      x-oapi-codegen-extra-tags:
        bson: updated_at,omitempty

  parameters:
    country:
      name: country
      in: query
      description: User country
      required: false
      schema:
        type: string
      example:
        country: US
    email:
      name: email
      in: query
      description: User email
      required: false
      schema:
        type: string
      example:
        email: jd@example.com
    page:
      name: page
      in: query
      description: Page number
      required: true
      schema:
        type: integer
        format: int64
        default: 0
    limit:
      name: limit
      in: query
      description: Number of users per page
      required: true
      schema:
        type: integer
        format: int64
        default: 10
        maximum: 100

  responses:
    400BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    500InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
