// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// CreateUserResponse defines model for CreateUserResponse.
type CreateUserResponse struct {
	Id *string `json:"id,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// GetUsersResponse defines model for GetUsersResponse.
type GetUsersResponse struct {
	Users *[]User `json:"users,omitempty"`
}

// User defines model for User.
type User struct {
	Id        string     `json:"_id"`
	Country   string     `json:"country"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Email     string     `json:"email"`
	FirstName string     `json:"first_name"`
	LastName  string     `json:"last_name"`
	Nickname  string     `json:"nickname"`
	Password  string     `json:"password"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// UserUpdateData defines model for UserUpdateData.
type UserUpdateData struct {
	Country   *string `json:"country,omitempty"`
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"first_name,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
	Nickname  *string `json:"nickname,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// IdPath defines model for idPath.
type IdPath = string

// IdQuery defines model for idQuery.
type IdQuery = string

// Limit defines model for limit.
type Limit = int64

// Page defines model for page.
type Page = int64

// N400BadRequest defines model for 400BadRequest.
type N400BadRequest = Error

// N500InternalServerError defines model for 500InternalServerError.
type N500InternalServerError = Error

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// User ID
	Id *IdQuery `form:"id,omitempty" json:"id,omitempty"`

	// Page number
	Page Page `form:"page" json:"page"`

	// Number of users per page
	Limit Limit `form:"limit" json:"limit"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = User

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = UserUpdateData

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a new user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Delete a user
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id IdPath) error
	// Update a user
	// (PUT /users/{id})
	UpdateUser(ctx echo.Context, id IdPath) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.PUT(baseURL+"/users/:id", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW3W7cNhN9FWK+71K15MQtCt0lcRss0BZuCl8FC2Mize4yFX9Mjpwaht69IKn9s6h1",
	"grqF71Y7w5kzc2Z4+ACNUdZo0uyhfgCLDhUxufgl2yvkTfjVkm+ctCyNhhquPTmxuIQCZPi0wakAjYqg",
	"BtlCAY5ue+mohZpdTwX4ZkMKQyS+t8HLs5N6DcNQgGx/78ndP5nmNnod5zkVt5NK8jTqb736RE6Yleg9",
	"OS8sOWFxTTNpUpRTFbW0wr5jqM+rAlbGKeQAT/MPF1CAwr+k6lWwVsUWpdRMa3IRZsw9QXmFaxI6Qp0B",
	"NmL+Clw5WBMgQwjlrdGeIvcXVfUW2w9025OPXWyMZtLxJ1rbyQYD1PKzD3gfDvL+39EKavhfuR+tMll9",
	"+ZNzZsx2XO9C32EnW+HGhEMB31fVQjM5jd0f5O7IpcP/AZSUVPiYVdDouO1tbM87R8gUJvTD2LW4Ps5Y",
	"cixpXJ/8YO4p+wg3soXljg7z6TM1sfhdrcchFXk/zsvpuFvHXOz3xAG4n0ceNyOWwKT8U50MwULcMRE6",
	"h/cR0CRz9Jxku8k2qoDG9JrTxTC1xf63NxinYDfeLTJ9x1LRfsT3Z0ih7LLRVtJ5vkmLlTF3eMqqZfPn",
	"rNGi91+MyxfY2/Ybi8hMzxH6Q6wHyLa1H+DZt3c5Q9R1RHeJjFPKTlHzwto8ncMoOnplZhTnV9S4JkWa",
	"xZurhVgZJ37GhiSLdxvsOtLx3mXJHeWPQAF35HwKWZ1VZ+cBorGk0Uqo4fVZdfY6csGb2M1yt29ryijW",
	"e2KBXZf0CmIkF2+8RZus16PhUL0/5nd271JudXconnSNWvMVfkksh+UjLXlVVc92bU8ur8wN/kZ00vNO",
	"4kP3LxKEXOQd1PJY85IEPX1qRqeiYPRKYViTCYeM60DSeNMuwwgbn+E+6YxAoelLPDzhf69E42uAPL81",
	"7f2zdTxd79MXwqvq/NlyZOQ0w2vyalMfXgCpOXIeEzsU43qXD7IdEsEdcebJdxn/F5inOVlHmr910eMz",
	"PrOWF3MoXk6PH3clszh9Zm+SeM01M1n/eTP/nWU7EN7s2lXPvtpFtnsvZwgeszlZsuAdTycOj6v5xTS7",
	"1zwU0LsOatgw27osu2DbGM/1j1VVlWhleXcOw3L4OwAA//+PhIclGg8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
