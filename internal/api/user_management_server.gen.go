// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Country defines model for Country.
type Country = string

// CreateUserResponse defines model for CreateUserResponse.
type CreateUserResponse struct {
	Id Id `bson:"_id,omitempty" json:"_id"`
}

// CreatedAt defines model for CreatedAt.
type CreatedAt = time.Time

// Email defines model for Email.
type Email = string

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// FirstName defines model for FirstName.
type FirstName = string

// GetUsersResponse defines model for GetUsersResponse.
type GetUsersResponse struct {
	Users *[]User `json:"users,omitempty"`
}

// Id defines model for Id.
type Id = string

// LastName defines model for LastName.
type LastName = string

// Nickname defines model for Nickname.
type Nickname = string

// Password defines model for Password.
type Password = string

// UpdatedAt defines model for UpdatedAt.
type UpdatedAt = time.Time

// User defines model for User.
type User struct {
	Id        Id        `bson:"_id,omitempty" json:"_id"`
	Country   Country   `bson:"country,omitempty" json:"country"`
	CreatedAt CreatedAt `bson:"created_at,omitempty" json:"created_at"`
	Email     Email     `bson:"email,omitempty" json:"email"`
	FirstName FirstName `bson:"first_name,omitempty" json:"first_name"`
	LastName  LastName  `bson:"last_name,omitempty" json:"last_name"`
	Nickname  Nickname  `bson:"nickname,omitempty" json:"nickname"`
	UpdatedAt UpdatedAt `bson:"updated_at,omitempty" json:"updated_at"`
}

// UserCreateData defines model for UserCreateData.
type UserCreateData struct {
	Country   Country    `bson:"country,omitempty" json:"country"`
	CreatedAt *CreatedAt `bson:"created_at,omitempty" json:"created_at,omitempty"`
	Email     Email      `bson:"email,omitempty" json:"email"`
	FirstName FirstName  `bson:"first_name,omitempty" json:"first_name"`
	LastName  LastName   `bson:"last_name,omitempty" json:"last_name"`
	Nickname  Nickname   `bson:"nickname,omitempty" json:"nickname"`
	Password  Password   `bson:"password,omitempty" json:"password"`
	UpdatedAt *UpdatedAt `bson:"updated_at,omitempty" json:"updated_at,omitempty"`
}

// UserUpdateData defines model for UserUpdateData.
type UserUpdateData struct {
	Country   *Country   `bson:"country,omitempty" json:"country,omitempty"`
	Email     *Email     `bson:"email,omitempty" json:"email,omitempty"`
	FirstName *FirstName `bson:"first_name,omitempty" json:"first_name,omitempty"`
	LastName  *LastName  `bson:"last_name,omitempty" json:"last_name,omitempty"`
	Nickname  *Nickname  `bson:"nickname,omitempty" json:"nickname,omitempty"`
	Password  *Password  `bson:"password,omitempty" json:"password,omitempty"`
	UpdatedAt *UpdatedAt `bson:"updated_at,omitempty" json:"updated_at,omitempty"`
}

// Limit defines model for limit.
type Limit = int64

// Page defines model for page.
type Page = int64

// N400BadRequest defines model for 400BadRequest.
type N400BadRequest = Error

// N500InternalServerError defines model for 500InternalServerError.
type N500InternalServerError = Error

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// User country
	Country *Country `form:"country,omitempty" json:"country,omitempty"`

	// User email
	Email *Email `form:"email,omitempty" json:"email,omitempty"`

	// Page number
	Page Page `form:"page" json:"page"`

	// Number of users per page
	Limit Limit `form:"limit" json:"limit"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = UserCreateData

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = UserUpdateData

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /_healthz)
	GetHealthz(ctx echo.Context) error
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a new user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Delete a user
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id string) error
	// Update a user
	// (PUT /users/{id})
	UpdateUser(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealthz(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "country" -------------

	err = runtime.BindQueryParameter("form", true, false, "country", ctx.QueryParams(), &params.Country)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter country: %s", err))
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/_healthz", wrapper.GetHealthz)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.PUT(baseURL+"/users/:id", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX1PkNgz/Kh63j4GEO9rp7FM5uLtue6UMDE8Mw5hEu2susY2t8KdMvnvHdv5t4rB0",
	"h2t5uLfN2pJ+ln6SJT/RVBZKChBo6OyJKqZZAQjafaWyFKgf7c8MTKq5Qi4FndFzA5o0qxGFB1aoHNZE",
	"6PkZrSLK7fbbEtw+wQqgM9oJmnQFBbNy+KjskkHNxZJWVUShYDyfMO3X1gzX2+lN9mv9724qiykIjYLn",
	"AOS84DgGcFwW16CJXJDSgDZEgSaKLYGGLXktEdVwW3INGZ2hLqFvOYMFK3Oks70kogupC4Z0RrnAn/dp",
	"RAv2wIuysKtJ1KDkAmEJ2sF0tkcoT9gSiHBQJ4DVmF+AKwRrBKSyqoySwoDjzn6SfGDZKdyWYNAzQyAI",
	"95MplfOUWajxjbF4n3p2f9SwoDP6Q9xRM/arJv6otaytrZ93Lu5YzjOia4NVRH9KkrlA0ILlZ6DvQHvh",
	"/wCKN0qMs0qg3tj41rnnsEutlsT0/I/OszURI/qwI5niO6nMYAliBx5Qsx1kS6fm2kFuMiqSBUcoFD46",
	"c4caGIJNmNM6Mi7FtVSgkfswXfFs00HnGfXRbYhy4aQuW6jy+gZS53JvMTtwrm05kzGEHeQFbHs6r/WK",
	"4eCAH5sS0bnwxqyl/3YGXXUY2mrIs+6/AoypE3BcQfouazaG3PaJa4PHLi37Z/ldrsSWJ1hYjVc20wfH",
	"+AxoCWGmGeGqmv1hxcwmclhl9gg1SKY184ZGh5xnYye97DBXPBuc4gsL+etIbsuwnIW9dczTr2Jk5ybb",
	"0oyo1Q2snDBj7qXO1q3cS70tf1WtcGDnXGXfIDtLr3WcnY4a2xacqN98PLe5KaRWoq0TG4XaOtVvNJ6t",
	"9m5TFfUya5NIl9W2mWAvlGqpXUUtXzbJtDStol44NqZuS4dQeV87aR9/D1bU9lFdS9cLwhqYUN2zDPGh",
	"OGLIxlz5ToGtKKB69eQ5mbbuvBJt/g1hWowdd6YY4g2+FkO+h3rbUA+CU7nRaiEnRrQ/mWBLKEAgOTiZ",
	"k4XU5BNLgSM5XLE8B+GmD+ToO9+xCI3oHWjjVSa7ye6eBS8VCKY4ndH3u8nue8ckXDkuxFcrYDmu/rYf",
	"SwiMbqeApRaGvEsSwhcEV+B6dJ4C4YaUijCREV0K4W8/SzQ3GdjWxXZOv9X6B6POuyQZTBUIDxirnPHB",
	"PNHd7n+NW/3AKHE2ic6NE2VRMDdre2AkXUH61ep1N/QF9f6gl3Zz3PZ1Qdd8BiQsz/1MGzr7eb3QfyG4",
	"CNOn2xKnbeJt3Ap1zm3c6AbXF+zzk3d1uTFa28+Ao246EMMDknOD7XuBJfG+hxDS3EKN1wdoP89ulpoY",
	"etfpMgx2wxf/fWnrijQBkvg7kzAi4N4Jj4jSjZz10wIY/CCzx1fz+KBlqMYPD++SvVezFpigAxGuWwnv",
	"kTcQ3lCYhiFuK0L8xLPKhzoHDLwkHbn/CQsH3K/WAR/UhsCtMD9qXqNs2e4eo1zDOf0UNSyU45zenwL+",
	"dsIydGQg68pA0vlLeMr/fvV/8f+3Se5etxdM7uRVrYXSue563gxvhgQYpbLd7aRDYf8i0/Yp0k5kOqcz",
	"ukJUszjO7dpKGpz9kiRJzBSP7/ZodVn9EwAA//+CQySaFxgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
